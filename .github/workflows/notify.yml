name: Notify

on:
  workflow_run:
    workflows: [ "pages-build-deployment" ]
    types:
      - completed
  workflow_dispatch:

jobs:
  notify:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    runs-on: ubuntu-latest

    steps:
      - name: Send Notification
        uses: evgnick/notify-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          telegram-token: ${{ secrets.TELEGRAM_TOKEN }}
          telegram-chat-id: ${{ secrets.TELEGRAM_CHAT_ID }}
          workflow-name: "CI"






#      - name: Find the latest CI run
#        uses: actions/github-script@v6
#        id: find_ci_run
#        with:
#          script: |
#            const runs = await github.rest.actions.listWorkflowRunsForRepo({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              per_page: 100,
#            });
#            const ciRuns = runs.data.workflow_runs
#              .filter(run => run.name === "CI" && run.status === "completed" && (run.conclusion === "success" || run.conclusion === "failure"))
#              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
#            const latestCiRun = ciRuns[0];
#            const runNumber = latestCiRun.run_number;
#            core.setOutput("run_number", runNumber);
#            core.setOutput("run_id", latestCiRun.id);
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Install dependencies
#        run: pip install matplotlib
#
#      - name: Fetch test results from Allure report
#        run: |
#          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
#          REPORT_URL="https://${{ github.repository_owner }}.github.io/$REPO_NAME/${{ steps.find_ci_run.outputs.run_number }}/widgets/summary.json"
#
#          wget -q -O summary.json "$REPORT_URL" || { echo "Failed to download report"; exit 1; }
#
#          PASSED=$(jq '.statistic.passed' summary.json || echo "0")
#          FAILED=$(jq '.statistic.failed' summary.json || echo "0")
#          BROKEN=$(jq '.statistic.broken' summary.json || echo "0")
#          SKIPPED=$(jq '.statistic.skipped' summary.json || echo "0")
#          UNKNOWN=$(jq '.statistic.unknown' summary.json || echo "0")
#          DURATION=$(jq '.time.duration' summary.json || echo "0")
#          DURATION_FINAL=$(date -ud @$((DURATION / 1000)) +'%M:%S')
#
#          echo "PASSED=$PASSED" >> $GITHUB_ENV
#          echo "FAILED=$FAILED" >> $GITHUB_ENV
#          echo "BROKEN=$BROKEN" >> $GITHUB_ENV
#          echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
#          echo "UNKNOWN=$UNKNOWN" >> $GITHUB_ENV
#          echo "DURATION_FINAL=$DURATION_FINAL" >> $GITHUB_ENV
#
#      - name: Generate test results donut chart
#        run: |
#          python -c "
#          import matplotlib.pyplot as plt
#          import os
#          from matplotlib import patches
#
#          passed = int(os.getenv('PASSED', 0))
#          failed = int(os.getenv('FAILED', 0))
#          broken = int(os.getenv('BROKEN', 0))
#          skipped = int(os.getenv('SKIPPED', 0))
#          unknown = int(os.getenv('UNKNOWN', 0))
#
#          labels = ['Passed', 'Failed', 'Broken', 'Skipped', 'Unknown']
#          values = [passed, failed, broken, skipped, unknown]
#          colors = ['#8BC34A', '#F44336', '#FF9800', '#2196F3', '#8A2BE2']
#
#          fig, ax = plt.subplots(figsize=(3, 2))
#          wedges, texts, autotexts = ax.pie(
#              values, labels=None, autopct='%1.1f%%', colors=colors,
#              startangle=90, wedgeprops={'edgecolor': 'white', 'linewidth': 2}, pctdistance=0.85,
#          )
#
#          for autotext in autotexts:
#              if float(autotext.get_text().replace('%', '')) == 0:
#                  autotext.set_text('')
#              autotext.set_fontsize(6)
#
#          centre_circle = plt.Circle((0, 0), 0.60, fc='white')
#          fig.gca().add_artist(centre_circle)
#
#          ax.text(0, 0, str(sum(values)), ha='center', va='center', fontsize=16, fontweight='bold')
#
#          legend_x = 1.05
#          legend_y = 0.6
#          plt.gca().set_position([0, 0, 0.7, 1])
#
#          total = sum(values)
#          percentages = [(value / total) * 100 if total > 0 else 0 for value in values]
#
#          for i, (label, color, value) in enumerate(zip(labels, colors, values)):
#            rect = patches.Rectangle(
#              (legend_x - 0.07, legend_y - i * 0.1 - 0.025),
#              0.05, 0.05, color=color, transform=ax.transAxes, clip_on=False
#            )
#            plt.gcf().add_artist(rect)
#
#            plt.gcf().text(
#              legend_x - 0.35,
#              legend_y - i * 0.1,
#              f'{value} - {label}',
#              color='black', fontsize=8,
#              bbox=dict(facecolor='white', edgecolor='white', boxstyle='square,pad=0.3'),
#              ha='left', va='center'
#            )
#
#          plt.savefig('chart.png', dpi=300, bbox_inches='tight', pad_inches=0.05)
#          "
#
#      - name: Send Telegram Notification
#        run: |
#          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
#          REPORT_LINK="https://${{ github.repository_owner }}.github.io/$REPO_NAME/${{ steps.find_ci_run.outputs.run_number }}/"
#
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          TIMESTAMP=$(date +"%Y.%m.%d %H:%M:%S")
#
#
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')
#
#          MESSAGE="üìù Report: [open](${ESCAPED_REPORT_LINK})
#          üìÖ Data and time: ${ESCAPED_TIMESTAMP}
#          ‚è±Ô∏è Execution time: $DURATION_FINAL
#          ‚öôÔ∏è Build: ${{ steps.find_ci_run.outputs.run_number }}
#          üîó Run: [see](${ESCAPED_CI_RUN_LINK})"
#
#          ESCAPED_MESSAGE=$(echo "$MESSAGE" | sed -E 's/([\\`*_{}\[\]()#+\-!|<>])/\\\1/g')
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendPhoto" \
#          -F chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#          -F photo="@chart.png" \
#          -F caption="$ESCAPED_MESSAGE" \
#          -F parse_mode="MarkdownV2"

#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|:|\\:|g; s|/|\\/|g')
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|\.|\\.|g')

#      - name: Send Telegram Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          ESCAPED_TIMESTAMP=$(echo "$TIMESTAMP" | sed 's|-|\\-|g; s|:|\\:|g; s|\.|\\.|g; s|_|\\_|g; s|/|\\/|g')
#          ESCAPED_REPORT_LINK=$(echo "$REPORT_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#          ESCAPED_CI_RUN_LINK=$(echo "$CI_RUN_LINK" | sed 's|-|\\-|g; s|\.|\\.|g; s|_|\\_|g; s|:|\\:|g; s|/|\\/|g')
#
#          MESSAGE="üìù –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure: [–æ—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç](${ESCAPED_REPORT_LINK})%0AüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${ESCAPED_TIMESTAMP}%0A‚öôÔ∏è –°–±–æ—Ä–∫–∞: ${{ steps.find_ci_run.outputs.run_number }}%0Aüîó –ó–∞–ø—É—Å–∫: [–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫](${ESCAPED_CI_RUN_LINK})"
#
#          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
#            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
#            -d text="${MESSAGE}" \
#            -d parse_mode="MarkdownV2"

#      - name: Send Slack Notification
#        run: |
#          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
#          REPORT_LINK="https://evgnick.github.io/JenkinsQA_2024_fall2/${{ steps.find_ci_run.outputs.run_number }}/"
#          CI_RUN_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_ci_run.outputs.run_id }}"
#
#          MESSAGE="*–ù–æ–≤—ã–π –æ—Ç—á–µ—Ç Allure*\nüìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è*: $TIMESTAMP\n‚öôÔ∏è *–°–±–æ—Ä–∫–∞*: ${{ steps.find_ci_run.outputs.run_number }}\nüîó *<$REPORT_LINK|–û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç>*\nüîó *<$CI_RUN_LINK|–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—É—Å–∫>*"
#
#          curl -X POST -H 'Content-type: application/json' \
#            --data "{\"text\": \"$MESSAGE\"}" \
#            ${{ secrets.SLACK_WEBHOOK_URL }}
