name: CI

on:
  workflow_dispatch:


jobs:
  run-test:
    name: 'Run tests'
    runs-on: ubuntu-latest
    env:
      ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
      ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}

    steps:
      - name: Git clone
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: 'maven'

      - name: Get list of changed files
        run: echo "LIST_OF_CHANGED_FILES=$(git diff --name-only origin/$GITHUB_HEAD_REF $(git merge-base origin/$GITHUB_HEAD_REF origin/main) | tr '\n' ';')" >> $GITHUB_ENV

      - name: Prepare Jenkins data
        run: |
          cat ${{ github.workspace }}/jenkins_data/jenkins_backup0* > ${{ github.workspace }}/jenkins_backup.tar
          md5sum ${{ github.workspace }}/jenkins_backup.tar

      - name: Extract Jenkins data and set permission
        run: |
          tar -xvf ./jenkins_backup.tar
          chmod -R 777 ./jenkins_backup/var/jenkins_home

      - name: Docker login
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Docker start
        run: docker run --rm --detach -p 8080:8080 -v ${{ github.workspace }}/jenkins_backup/var/jenkins_home:/var/jenkins_home jenkins/jenkins:2.462.3-lts-jdk17

      - name: Create screenshots directory
        run: mkdir -p ${{ github.workspace }}/screenshots

      - name: Maven test
        run: mvn test
#        env:
#          CHROME_OPTIONS: --remote-allow-origins=*;--disable-gpu;--no-sandbox;--disable-dev-shm-usage;--headless=new;--window-size=1920,1080
#          APP_OPTIONS: host=localhost;port=8080;admin.username=${{ secrets.ADMIN_USERNAME }};admin.password=${{ secrets.ADMIN_PASSWORD }}
#          CI_RUN: true

      - name: Attach screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: ${{ github.workspace }}/screenshots

      - name: Get Allure history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Allure Report action
        uses: simple-elf/allure-report-action@master
        if: always()
        id: allure-report
        with:
          allure_results: target/allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history

      - name: Queue deployment
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
          timeout-seconds: 1200
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy report to Github Pages
        if: ${{ success() || failure() }}
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history

      - name: Get latest run ID from gh-pages
        run: |
          LATEST_RUN_ID=$(ls -1 gh-pages | sort -n | tail -1)
          echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV

      - name: Send InfluxDB data to InfluxDB
        if: always()
        run: |
          echo "Checking if InfluxDB data exists on GitHub Pages..."
          if [ -f "gh-pages/${{ env.LATEST_RUN_ID }}/export/influxDbData.txt" ]; then
            echo "InfluxDB data found. Sending to InfluxDB..."

            curl -XPOST "http://a2657cf0c126.vps.myjino.ru:49169/api/v2/write?org=my-org&bucket=allure_bucket&precision=ns" \
              --header "Authorization: Token ${{ secrets.INFLUXDB_TOKEN }}" \
              --data-binary @"gh-pages/${{ env.LATEST_RUN_ID }}/export/influxDbData.txt"

            echo "InfluxDB data sent."
          else
            echo "No InfluxDB data found."
          fi